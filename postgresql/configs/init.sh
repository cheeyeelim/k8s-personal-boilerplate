#!/bin/bash

# (1) Create all users and databases, then grant all permissions

psql postgres://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@localhost:5432/postgres << SQL1
    CREATE USER ${PGBOUNCER_DB_USERNAME} WITH PASSWORD '${PGBOUNCER_DB_PASSWORD}';

    CREATE USER ${AIRFLOW_DB_USERNAME} WITH PASSWORD '${AIRFLOW_DB_PASSWORD}';
    CREATE DATABASE ${AIRFLOW_DB_DATABASE};
    GRANT ALL PRIVILEGES ON DATABASE ${AIRFLOW_DB_DATABASE} TO ${AIRFLOW_DB_USERNAME};
    GRANT ALL PRIVILEGES ON DATABASE ${AIRFLOW_DB_DATABASE} TO ${POSTGRES_USERNAME};

    CREATE USER ${DASH_DB_USERNAME} WITH PASSWORD '${DASH_DB_PASSWORD}';
    CREATE DATABASE ${DASH_DB_DATABASE};
    GRANT ALL PRIVILEGES ON DATABASE ${DASH_DB_DATABASE} TO ${DASH_DB_USERNAME};
    GRANT ALL PRIVILEGES ON DATABASE ${DASH_DB_DATABASE} TO ${POSTGRES_USERNAME};

    CREATE USER ${MLFLOW_DB_USERNAME} WITH PASSWORD '${MLFLOW_DB_PASSWORD}';
    CREATE DATABASE ${MLFLOW_DB_DATABASE};
    GRANT ALL PRIVILEGES ON DATABASE ${MLFLOW_DB_DATABASE} TO ${MLFLOW_DB_USERNAME};
    GRANT ALL PRIVILEGES ON DATABASE ${MLFLOW_DB_DATABASE} TO ${POSTGRES_USERNAME};
    CREATE DATABASE ${MLFLOW_AUTH_DATABASE};
    GRANT ALL PRIVILEGES ON DATABASE ${MLFLOW_AUTH_DATABASE} TO ${MLFLOW_DB_USERNAME};
    GRANT ALL PRIVILEGES ON DATABASE ${MLFLOW_AUTH_DATABASE} TO ${POSTGRES_USERNAME};
SQL1


# (2) Create required permissions and functions in all databases
# NOTE that postgresql schema & table permissions, and functions are unique to each database, and postgresql cannot switch between databases

for DB in $(psql postgres://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@localhost:5432/postgres -t -c "SELECT datname FROM pg_database WHERE datname NOT IN ('postgres', 'template0', 'template1')"); do

psql postgres://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@localhost:5432/${DB} << SQL2
    DO \$\$
    BEGIN
    IF '${DB}' = '${AIRFLOW_DB_DATABASE}' THEN
    EXECUTE 'GRANT ALL PRIVILEGES ON SCHEMA public TO ${AIRFLOW_DB_USERNAME}';
    EXECUTE 'GRANT CREATE, USAGE ON SCHEMA public TO ${AIRFLOW_DB_USERNAME}';
    EXECUTE 'GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ${AIRFLOW_DB_USERNAME}';
    EXECUTE 'GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ${AIRFLOW_DB_USERNAME}';
    END IF;
    END \$\$;

    DO \$\$
    BEGIN
    IF '${DB}' = '${DASH_DB_DATABASE}' THEN
    EXECUTE 'GRANT ALL PRIVILEGES ON SCHEMA public TO ${DASH_DB_USERNAME}';
    EXECUTE 'GRANT CREATE, USAGE ON SCHEMA public TO ${DASH_DB_USERNAME}';
    EXECUTE 'GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ${DASH_DB_USERNAME}';
    EXECUTE 'GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ${DASH_DB_USERNAME}';
    END IF;
    END \$\$;

    DO \$\$
    BEGIN
    IF '${DB}' =' ${MLFLOW_DB_DATABASE}' THEN
    EXECUTE 'GRANT ALL PRIVILEGES ON SCHEMA public TO ${MLFLOW_DB_USERNAME}';
    EXECUTE 'GRANT CREATE, USAGE ON SCHEMA public TO ${MLFLOW_DB_USERNAME}';
    EXECUTE 'GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ${MLFLOW_DB_USERNAME}';
    EXECUTE 'GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ${MLFLOW_DB_USERNAME}';
    END IF;
    END \$\$;

    DO \$\$
    BEGIN
    IF '${DB}' = '${MLFLOW_AUTH_DATABASE}' THEN
    EXECUTE 'GRANT ALL PRIVILEGES ON SCHEMA public TO ${MLFLOW_DB_USERNAME}';
    EXECUTE 'GRANT CREATE, USAGE ON SCHEMA public TO ${MLFLOW_DB_USERNAME}';
    EXECUTE 'GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ${MLFLOW_DB_USERNAME}';
    EXECUTE 'GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ${MLFLOW_DB_USERNAME}';
    END IF;
    END \$\$;
SQL2

psql postgres://${POSTGRES_USERNAME}:${POSTGRES_PASSWORD}@localhost:5432/${DB} << 'SQL3'
    CREATE OR REPLACE FUNCTION public.pgbouncer_user_search(INOUT p_user name, OUT p_password text) RETURNS record as
    $$
    SELECT usename, passwd FROM pg_shadow WHERE usename = p_user;
    $$
    LANGUAGE sql SECURITY DEFINER;
SQL3

done
