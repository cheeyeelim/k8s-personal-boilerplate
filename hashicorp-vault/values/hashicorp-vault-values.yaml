# Get config options from
# https://github.com/hashicorp/vault-helm/blob/main/values.yaml

global:
  # For pulling any images from dockerhub
  imagePullSecrets:
    - dockerhub-secret
  # TLS for end-to-end encrypted transport
  tlsDisable: true
  serverTelemetry:
    # Enable integration with the Prometheus Operator
    # See the top level serverTelemetry section below before enabling this feature.
    prometheusOperator: false

# Setup vault agent sidecar injector
# https://developer.hashicorp.com/vault/docs/platform/k8s/injector
injector:
  enabled: false

# Setup vault server
server:
  enabled: true
  logLevel: "info"

  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    ingressClassName: nginx
    pathType: ImplementationSpecific
    hosts:
      - host: vault.mydomain.com
        paths: []
    tls:
    - hosts:
      - vault.mydomain.com
      secretName: vault-mydomain-tls

  # Set resources
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
      ephemeral-storage: 50Mi
    limits:
      cpu: 100m
      memory: 192Mi
      ephemeral-storage: 2Gi

  # Set affinity
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: node-type
            operator: In
            values:
            - master

  # Setup init containers to change PV permission
  # NOTE there is a possible bug in this chart that permission filesystem is not changed properly by setting fsgroup
  # Require init container to perform manual intervention
  extraInitContainers:
    - name: change-pv-permission
      image: docker.io/bitnami/os-shell:12-debian-12-r31
      command:
        - /bin/bash
      args:
        - -ec
        - |
          find /vault/data -mindepth 0 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | xargs -r chown -R 100:1000
      volumeMounts:
        - name: data
          mountPath: /vault/data
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
        allowPrivilegeEscalation: true

  readinessProbe:
    enabled: true
    periodSeconds: 30
    # Need longer timeout due to lower resource allocated
    timeoutSeconds: 20
    failureThreshold: 6
  livenessProbe:
    enabled: true
    # Should have a longer initial delay for manual vault init and unseal
    initialDelaySeconds: 300
    periodSeconds: 30
    # Need longer timeout due to lower resource allocated
    timeoutSeconds: 20
    failureThreshold: 6

  # Enables a headless service to be used by the Vault Statefulset
  service:
    enabled: true
    port: 8200
    targetPort: 8200

  # This configures the Vault Statefulset to create a PVC for data
  # storage when using the file or raft backend storage engines.
  # See https://developer.hashicorp.com/vault/docs/configuration/storage to know more
  dataStorage:
    enabled: true
    size: 5Gi
    # Location where the PVC will be mounted.
    mountPath: /vault/data
    storageClass: do-block-storage
    accessMode: ReadWriteOnce

  # Run Vault in "HA" mode
  ha:
    enabled: true
    replicas: 1

    # Enables Vault's integrated Raft storage.  Unlike the typical HA modes where
    # Vault's persistence is external (such as Consul), enabling Raft mode will create
    # persistent volumes for Vault to store data according to the configuration under server.dataStorage.
    # The Vault cluster will coordinate leader elections and failovers internally.
    raft:
      enabled: true
      setNodeId: true

      # Set only one config depending on which deployment or storage that is used
      config: |
        ui = true
        cluster_name = "vault-integrated-storage"

        listener "tcp" {
          tls_disable = 1
          address = "[::]:8200"
          cluster_address = "[::]:8201"
          # Enable unauthenticated metrics access (necessary for Prometheus Operator)
          telemetry {
            unauthenticated_metrics_access = "true"
          }
        }

        storage "raft" {
          path = "/vault/data"
        }

        service_registration "kubernetes" {}

        # Enabling Prometheus metrics.
        telemetry {
          prometheus_retention_time = "30s"
          disable_hostname = true
        }

  statefulset:
    # Set the pod and container security contexts.
    securityContext:
      pod:
        runAsNonRoot: true
        runAsGroup: 1000
        runAsUser: 100
        fsGroup: 1000
      container:
        allowPrivilegeEscalation: false

# Setup vault ui
ui:
  enabled: true
  serviceType: ClusterIP
  externalPort: 8200
  targetPort: 8200

# Setup vault CSI provider
# https://developer.hashicorp.com/vault/docs/platform/k8s/csi
csi:
  enabled: false

# Setup vault telemetry
# Vault is able to collect and publish various runtime metrics.
# Enabling this feature requires setting adding `telemetry{}` stanza to
# the Vault configuration. There are a few examples included in the `config` sections above.
#
# For more information see:
# https://developer.hashicorp.com/vault/docs/configuration/telemetry
# https://developer.hashicorp.com/vault/docs/internals/telemetry
serverTelemetry:
  serviceMonitor:
    enabled: true
    interval: 1m
    scrapeTimeout: 40s
